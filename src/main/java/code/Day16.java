package code;

import java.util.ArrayDeque;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Queue;
import java.util.Set;
import java.util.stream.Collectors;

public class Day16 {

    public enum Direction{
        UP,
        DOWN,
        RIGHT,
        LEFT
    }

    public static char[][] convertInputToGrid(String input) {
        String[] lines = input.trim().split("\n");
        int rows = lines.length;
        int cols = lines[0].trim().length();

        char[][] grid = new char[rows][cols];

        for (int i = 0; i < rows; i++) {
            String line = lines[i].trim();
            for (int j = 0; j < cols; j++) {
                grid[i][j] = line.charAt(j);
            }
        }

        return grid;
    }

    public static void main(String[] args) {

        String input = """
                .|...\\....
                |.-.\\.....
                .....|-...
                ........|.
                ..........
                .........\\
                ..../.\\\\..
                .-.-/..|..
                .|....-|.\\
                ..//.|....
                """;

        input = """
                \\.........|......./...|........................................................|............|-...\\...-/.......
                .....................\\.......\\........./...|...............|...\\................................-...|.......\\.
                .......................................-....-./............/.......-.............\\..|.......|......//.........
                ...../..../.....\\.........-.........-./..-.......\\./..\\.............-.....\\..........|-..................|....
                ...........\\..\\...............-.............|.......-.\\......\\...\\..........\\.......-.....|..................\\
                ................|.........|........|............--........./\\....|-.....................................-.....
                ........./...........\\................../...................\\././........./...-...-.\\.-.........-.............
                ......|.....|............-............./...|...................-...|........./............/......./...........
                ......./........../..|.....-...........\\|.................................................\\.........|..../....
                ........................|..................|.......|.................-..\\...........-/.\\.................\\.|..
                .......|...|./....................................-...\\........\\.......|............................|...|.....
                \\..-................................\\.......\\........../....|.....................|........\\../.........../..\\
                ....-|...............................\\....|..............\\.....................|.....\\......\\............../..
                .....\\......-.........-.\\.|..........|...............-.................|..........-............../............
                .........-...................-.............................................-.........../...................|.-
                ....................\\..\\........|-.\\...............-............/....|..................../...................
                .\\.........-........................|..-.......|.......-...........-.-...................\\/...\\....|....\\.....
                .-........-./.....-.....\\.......-..........\\..-........\\..-.....................................\\..../...|....
                ....-.........................|..\\.....................................\\./...............-............/.......
                ..........|..\\....-........./..............................|........................-.......|./|........\\.....
                ..\\.........|..|..-|........\\...-................|/..\\......../.......-|..................||.-./..............
                .--..-.......-........./.................\\....../.................-............................--.........-...
                .......|.........../......./........../..\\.........\\...\\../..\\..././.......-..................................
                .........-/...............|..\\|.................\\...........|............../............\\.....................
                ..........-.........\\.-................|-..................../......../...|/...\\..-....|-........-.......-....
                .--|.\\|.......|.....-............................|.-....-...|...................|........../..................
                .....-......./..../.|...................|\\..-.........../...|.............................\\/../........../....
                ......./........|.\\......-../...........\\........................./..........\\.........-...\\................|.
                ./.......................\\........-......|...|............................/............\\....-.....|..../...\\..
                ....................-..............-..-.............../..\\...../.\\.........\\................../.....\\.....-...
                ...................../......-....-.......|....|......../..|-...............\\..\\../.-.....././..........|......
                ..\\.....|...\\............................./.../...../..../......../...........................................
                ./.../................................../.....-.........|.....|..........-...............................-....
                ...............|..\\...-................................\\.........................|....\\...............-.-.....
                /........|.......|.....-.......-..-..-.\\.................................-.\\...-.......\\.............-..\\.....
                ./......|../......|................................/.........||.-....................|..\\.........-....|../...
                |..................................................\\......|...-............................../.......-........
                ....../...............-....-..................\\....-../................................./.\\.................-.
                ......-...........-...../.....-......|..........\\.\\...-......../......\\................--..............-......
                .............\\/........|...../...........-.......\\...|........................................................
                ...\\\\........\\..........|...\\............/........-..../....-.....................-......................../..
                .......-......../......./..........-....|....-..\\.........................\\.............../..........-.....-..
                .....|\\/..../.........|.........../|.....\\.......-........-............../..././.............|................
                .........|....|....\\..-....../............/.....\\/....|.............\\........................|.........-......
                .\\\\..........................//......................\\....\\...........................-.|/....................
                ...................|...................-.|........................................../..........\\..............
                ......\\..|....../...........\\.-.........-.......-..|../........../.............................../.......-...|
                ..........|................/|.....-.....\\................||........./.............|.........../..-..|./.......
                ............../../|.......\\...............-..../|..../-..|................................../......-....|..|..
                ............\\...............\\.........................\\....-.............-..|/.....--...................-...-.
                .....|\\......\\...........................-.................-.......\\...............|............|........../..
                .....\\...-.............|............\\........\\...../.-...........|.-.................\\.........|..............
                ......./......\\..-............|..-...\\......................\\..........|....../..........|........./.......\\.-
                ..-.....|........./|............./.....................|...|.\\....-.......-..........|...\\.\\|-........\\....|..
                ......................../............-...........|...................../............-.......\\.........-.......
                ......../..............-./...................................--........................\\....-.......-..//.....
                ........|.....-....................|...../..............-..........-......|..\\................................
                .......-..//.............../.....-......................./..|........./...........-..../..|.........-.........
                .-...............-...........................\\.......\\...........-..................-.|...\\..\\.....\\..\\.....\\.
                .........-../............|......|.|.........................\\.......-......\\...\\..............-../.../-\\......
                .-...........-..|.....\\/........-.|...................../.|........-...........\\..........\\.....\\/|..../...\\.\\
                .-..........\\.\\-..\\....-\\/................./.\\.......|.........................-............./....\\........./.
                .............\\.........|............/...........\\\\................./..-..........................|//.......\\..
                ..../-........-.........................-\\...........|................./..........|.............|.\\..|........
                ...-..|.....\\..-..\\.................\\-.................|...../.-..........|........|/...-.-.\\.................
                .-.-............................|.....\\..-..........|/|.........|....\\............\\.....\\..-...........|/...|.
                ......................../...............|..-............................-.........|........../.-....../.......
                .........|-...................|.....................-...........|.../..............................|....-...-.
                ..............|....................................................|.....|.......--.....\\...\\.............../.
                ..-...............|........|..................-............|.........../.....\\................................
                ........................|.........|............-....-..\\../..................\\..|......\\.........\\../.../.....
                .|............................./..............-....-.......--....-.../..........|.....\\.........-/.....|-./...
                ....-..............|...-.....\\.....\\/.-........................................-.\\.............|...../|/......
                ........./..-................/........./..............-............................................-....-.....
                ...........-........./...................../.........-........-................./.|...........................
                ............................................................-.............-..-......|..........-.\\............
                ....\\/........................-../.../.................................\\............/..........|./-......-...\\
                ....-............../..-.\\.......|......-...|...|.........../......|../...........|..-.\\.................../...
                ...-......../....-........................|...-............-.........................|/.....|.........|......-
                ...|........-.......-.......|...|\\.......\\............-...-...................................-|........-.....
                ....\\/..-.....-.....-..--./-..-............../................|............\\.............../.......|..........
                .........-.\\.......-......|........-.............|..../..............\\-.....\\..........-..../.................
                .................-......\\|.--..../../.-......-.......-........\\....-...../....................../.............
                ...../..../....../.............-......\\..........|..........\\..\\........-.-...................................
                ..............................|........./........-..................|.............-.../.................\\..-..
                .....|./......-........\\...\\.................|....-........|..............|...................................
                \\...|............................-..|.............../..............|.../......-......-.........../....../.....
                ..../.............................-..........\\.....\\-..................................-........../...........
                ..........................\\....................-...-/.|....................../................................
                \\.......|.........-............\\\\...............-...-...................../...................................
                ..\\...................................-................................................../.......\\.|..........
                ...............................-................/........\\....\\.......|...................-.../.....|.........
                ...-..-............-.||..../././..........-\\\\............||...............-.\\.........../...\\........|...\\...|
                ....\\./.|./...................\\..-.-./..-.....||............../............|.......\\.|...../..................
                ......-.......\\.\\.........\\......|..\\...\\.-|.\\..............|...|......\\......./...\\........................-.
                ........./.-......../....|..............................|...|...\\........//./.................................
                .........................|...........\\...........|.....................\\........//..-.................\\-/.....
                .\\....................\\..-.-..-..........|/.\\..........\\././.....................|............\\....|...|/.....
                ......./.................../...-.................\\.........../.........\\................|....................|
                ......-..\\....|..................\\............\\........|......|....../........................................
                .........\\/..............|.............\\.........-............-...........\\.\\..\\./....../.....//..............
                .........../...\\.......-.../.-.............\\../....\\|./............/...-..\\........|..|/.....\\......\\\\........
                ..|............/..............................................-./...-.|..........-......../...................
                ...............-..|.......\\.............\\..../.....................|..........\\...................\\.....\\./\\..
                .|..........\\..\\...|......................\\...........-.......--........................-.....................
                ...................../................\\.|..........-..|................-................................-.....
                ...../.........|-............|.\\.|.../\\.....|../........\\../..................................................
                ................/........\\../.....................\\./..../...........-............\\-......../../..\\.|.........
                ..............|.........-......|/......././.....|..../.|...........-.....................|./.-.....\\...|......
                .......|..-.......\\..........|................................................/..\\.....-..........-...........
                """;
        char[][] grid = convertInputToGrid(input);

        int count = part1(grid);
        System.out.println("Part 1  " + count);
        int count2 = part2(grid);
        System.out.println("Part 2  " + count2);
    }

    public static int part1(char[][] grid) {
        Set<String> visited = new LinkedHashSet<>();
        return bfs(grid,0,0,Direction.RIGHT,visited);
    }
    
    private static int part2(char[][] grid){
        int maxVal = 0;
        for (int i = 0; i < grid.length; i++) {
            maxVal = Math.max(maxVal,bfs(grid,i,0,Direction.RIGHT,new HashSet<>()));
            maxVal = Math.max(maxVal,bfs(grid,i,grid.length-1,Direction.LEFT,new HashSet<>()));
        }

        for (int i = 0; i < grid[0].length; i++) {
            maxVal = Math.max(maxVal,bfs(grid,0,i,Direction.DOWN,new HashSet<>()));
            maxVal = Math.max(maxVal,bfs(grid,grid.length-1,0,Direction.UP,new HashSet<>()));
        }
        return maxVal;
        
    }

    private static int bfs(char[][] grid, int startRow , int startCol , Direction startDir , Set<String> visited) {

        Queue<int[]> queue = new ArrayDeque<>();
        queue.offer(new int[]{startRow, startCol, startDir.ordinal()});
        visited.add(String.valueOf(startRow) + "," + startCol + "," +startDir.name());

        while (!queue.isEmpty()) {
            int[] current = queue.poll();
            int cr = current[0];
            int cc = current[1];
            int cd = current[2];
            char currentTile = grid[cr][cc];
            switch (currentTile) {
                case '.':
                    if (cd == Direction.UP.ordinal()) {
                        if (isValid(cr - 1, cc, grid, visited, Direction.UP)) {
                            queue.add(new int[]{cr - 1, cc, Direction.UP.ordinal()});
                            visited.add(String.valueOf(cr-1) +"," + cc + "," +Direction.UP.name());
                        }
                    } else if (cd == Direction.DOWN.ordinal()) {
                        if (isValid(cr + 1, cc, grid, visited, Direction.DOWN)) {
                            queue.add(new int[]{cr + 1, cc, Direction.DOWN.ordinal()});
                            visited.add(String.valueOf(cr+1) + "," +cc +"," +Direction.DOWN.name());
                        }
                    } else if (cd == Direction.RIGHT.ordinal()) {
                        if (isValid(cr, cc + 1, grid, visited, Direction.RIGHT)) {
                            queue.add(new int[]{cr, cc + 1, Direction.RIGHT.ordinal()});
                            visited.add(String.valueOf(cr) +"," +(cc+1) + "," +Direction.RIGHT.name());
                        }
                    } else {
                        if (isValid(cr, cc - 1, grid, visited, Direction.LEFT)) {
                            queue.add(new int[]{cr, cc - 1, Direction.LEFT.ordinal()});
                            visited.add(String.valueOf(cr) + "," +(cc-1) + "," +Direction.LEFT.name());
                        }
                    }
                    break;
                case '|':
                    if (cd == Direction.RIGHT.ordinal() || cd == Direction.LEFT.ordinal()) {
                        if (isValid(cr - 1, cc, grid, visited, Direction.UP)) {
                            queue.add(new int[]{cr - 1, cc, Direction.UP.ordinal()});
                            visited.add(String.valueOf(cr-1) +"," + cc +"," + Direction.UP.name());
                        }
                        if (isValid(cr + 1, cc, grid, visited, Direction.DOWN)) {
                            queue.add(new int[]{cr + 1, cc, Direction.DOWN.ordinal()});
                            visited.add(String.valueOf(cr+1) +"," + cc + "," +Direction.DOWN.name());
                        }
                    } else if (cd == Direction.UP.ordinal()) {
                        if (isValid(cr - 1, cc, grid, visited, Direction.UP)) {
                            queue.add(new int[]{cr - 1, cc, Direction.UP.ordinal()});
                            visited.add(String.valueOf(cr-1) +"," + cc + "," +Direction.UP.name());
                        }
                    } else {
                        if (isValid(cr + 1, cc, grid, visited, Direction.DOWN)) {
                            queue.add(new int[]{cr + 1, cc, Direction.DOWN.ordinal()});
                            visited.add(String.valueOf(cr+1) + "," +cc + "," +Direction.DOWN.name());
                        }
                    }
                    break;
                case '-':
                    if (cd == Direction.UP.ordinal() || cd == Direction.DOWN.ordinal()) {
                        if (isValid(cr, cc - 1, grid, visited, Direction.LEFT)) {
                            queue.add(new int[]{cr, cc - 1, Direction.LEFT.ordinal()});
                            visited.add(String.valueOf(cr) +"," + (cc-1) +"," + Direction.LEFT.name());
                        }
                        if (isValid(cr, cc + 1, grid, visited, Direction.RIGHT)) {
                            queue.add(new int[]{cr, cc + 1, Direction.RIGHT.ordinal()});
                            visited.add(String.valueOf(cr) +"," + (cc+1) +"," + Direction.RIGHT.name());
                        }
                    } else if (cd == Direction.RIGHT.ordinal()) {
                        if (isValid(cr, cc + 1, grid, visited, Direction.RIGHT)) {
                            queue.add(new int[]{cr, cc + 1, Direction.RIGHT.ordinal()});
                            visited.add(String.valueOf(cr) + "," +(cc+1) + "," +Direction.RIGHT.name());
                        }
                    } else {
                        if (isValid(cr, cc - 1, grid, visited, Direction.LEFT)) {
                            queue.add(new int[]{cr, cc - 1, Direction.LEFT.ordinal()});
                            visited.add(String.valueOf(cr) + "," +(cc-1) +"," + Direction.LEFT.name());
                        }
                    }
                    break;
                case '/':
                    if (cd == Direction.UP.ordinal()) {
                        if (isValid(cr, cc + 1, grid, visited, Direction.RIGHT)) {
                            queue.add(new int[]{cr, cc + 1, Direction.RIGHT.ordinal()});
                            visited.add(String.valueOf(cr) + "," +(cc+1) + "," +Direction.RIGHT.name());
                        }
                    } else if (cd == Direction.DOWN.ordinal()) {
                        if (isValid(cr, cc - 1, grid, visited, Direction.LEFT)) {
                            queue.add(new int[]{cr, cc - 1, Direction.LEFT.ordinal()});
                            visited.add(String.valueOf(cr) + "," +(cc-1) + "," +Direction.LEFT.name());
                        }
                    } else if (cd == Direction.RIGHT.ordinal()) {
                        if (isValid(cr - 1, cc, grid, visited, Direction.UP)) {
                            queue.add(new int[]{cr - 1, cc, Direction.UP.ordinal()});
                            visited.add(String.valueOf(cr-1) + "," +cc + "," +Direction.UP.name());
                        }
                    } else {
                        if (isValid(cr + 1, cc, grid, visited, Direction.DOWN)) {
                            queue.add(new int[]{cr + 1, cc, Direction.DOWN.ordinal()});
                            visited.add(String.valueOf(cr+1) +"," + cc + "," +Direction.DOWN.name());
                        }
                    }
                    break;
                case '\\':
                    if (cd == Direction.UP.ordinal()) {
                        if (isValid(cr, cc - 1, grid, visited, Direction.LEFT)) {
                            queue.add(new int[]{cr, cc - 1, Direction.LEFT.ordinal()});
                            visited.add(String.valueOf(cr) + "," +(cc-1) +"," + Direction.LEFT.name());
                        }
                    } else if (cd == Direction.DOWN.ordinal()) {
                        if (isValid(cr, cc + 1, grid, visited, Direction.RIGHT)) {
                            queue.add(new int[]{cr, cc + 1, Direction.RIGHT.ordinal()});
                            visited.add(String.valueOf(cr) + "," +(cc+1) +"," + Direction.RIGHT.name());
                        }
                    } else if (cd == Direction.RIGHT.ordinal()) {
                        if (isValid(cr + 1, cc, grid, visited, Direction.DOWN)) {
                            queue.add(new int[]{cr + 1, cc, Direction.DOWN.ordinal()});
                            visited.add(String.valueOf(cr+1) + "," +cc +"," + Direction.DOWN.name());
                        }
                    } else {
                        if (isValid(cr - 1, cc, grid, visited, Direction.UP)) {
                            queue.add(new int[]{cr - 1, cc, Direction.UP.ordinal()});
                            visited.add(String.valueOf(cr-1) +"," + cc +"," + Direction.UP.name());
                        }
                    }
                    break;
            }
        }

        Set<String> modifiedSet = visited.stream()
                .map(s -> s.split(","))
                .filter(parts -> parts.length >= 3)
                .map(parts -> parts[0] + "," + parts[1]).collect(Collectors.toSet());
        
        return modifiedSet.size();
    }

    private static boolean isValid(int nr, int nc, char[][] grid , Set<String>visited , Direction cd) {
        return nr >= 0 && nr < grid.length && nc >= 0 && nc < grid[0].length && !visited.contains(String.valueOf(nr)+"," +nc+"," +cd.name());
    }
}

